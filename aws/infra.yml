AWSTemplateFormatVersion: "2010-09-09"
Resources:
  # VPC and Subnets Boilerplate
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: ecom-vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: ecom-igw

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Name
          Value: ecom-public-subnet

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Name
          Value: ecom-private-subnet-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
        - Key: Name
          Value: ecom-private-subnet-2

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: ecom-route-table

  Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref RouteTable
# ECOM Instances

# EC2Instance:
#   Type: "AWS::EC2::Instance"
#   Properties:
#     InstanceType: t2.micro
#     ImageId: ami-0118dc74bd8f98b13
#     KeyName: ecom
#     SecurityGroups:
#       - !Ref InstanceSecurityGroup
#     Tags:
#       - Key: Name
#         Value: ecom-server

# EC2SecurityGroup:
#   Type: "AWS::EC2::SecurityGroup"
#   Properties:
#     GroupDescription: Enable SSH and Web access
#     SecurityGroupIngress:
#       - IpProtocol: tcp
#         FromPort: 22
#         ToPort: 22
#         CidrIp: 0.0.0.0/0
#       - IpProtocol: tcp
#         FromPort: 80
#         ToPort: 80
#         CidrIp: 0.0.0.0/0
#       - IpProtocol: tcp
#         FromPort: 443
#         ToPort: 443
#         CidrIp: 0.0.0.0/0

# DBInstance:
#   Type: AWS::RDS::DBInstance
#   Properties:
#     Engine: postgres
#     EngineVersion: "14.2" # Specify the desired PostgreSQL version
#     DBInstanceClass: db.t3.micro # Choose an appropriate instance class
#     AllocatedStorage: "20"
#     StorageType: gp2
#     MasterUsername: admin
#     MasterUserPassword: password123
#     DBName: ecom-db
#     PubliclyAccessible: false
#     MultiAZ: false
#     VPCSecurityGroups:
#       - !Ref DBSecurityGroup
#     DBSubnetGroupName: !Ref DBSubnetGroup

# DBSecurityGroup:
#   Type: AWS::EC2::SecurityGroup
#   Properties:
#     GroupDescription: Security group for RDS instance
#     SecurityGroupIngress:
#       - IpProtocol: tcp
#         FromPort: 5432
#         ToPort: 5432
#         CidrIp: 0.0.0.0/0 # Restrict this to your application's security group in production

# DBSubnetGroup:
#   Type: AWS::RDS::DBSubnetGroup
#   Properties:
#     DBSubnetGroupDescription: Subnet group for RDS instance
#     SubnetIds:
#       -
